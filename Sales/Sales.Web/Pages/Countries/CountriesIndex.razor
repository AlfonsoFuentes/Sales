@page "/countries"

<h3>Countries</h3>
<a class="btn btn-primary" href="/countries/create">New Country</a>

<GenericList Items="@Countries">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Country</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var country in Countries)
                {
                    <tr>
                        <td>
                            <a href="/countries/edit/@country.Id" class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger"  @onclick=@(() => Delete(country))>Borrar</button>

                        </td>
                        <td>
                            @country.Name
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>


@code {
    [Inject]
    private IRepository Repository { get; set; }

    private List<Country> Countries { get; set; } = null!;
    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var responseHppt = await repository.Get<List<Country>>("/countries");
        Countries = responseHppt.Response!;
    }

    private async Task Delete(Country country)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirm",
                Text = $"¿Are you sure delete {country.Name}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"/countries/{country.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                return;
            }
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }
        await Load();
    }

}
